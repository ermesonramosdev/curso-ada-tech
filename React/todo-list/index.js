/*
    ! Componentes Funcionais e Nova forma de estilo
        * O que s√£o componentes funcionais: 
        -> Componentes funcionais s√£o fun√ß√µes que retorna HTML.

        * React + TypeScript
         ? : React.FC
            -> Determina que o componente se torna funcional.

        * CSS Modules 
        ->  Vai criar uma estiliza√ß√£o unica para meu componente para n√£o ter conflitos entre as classes repetidas de outro componente.

    ! React Funcional II - Hooks de estado 
        * O que s√£o os Hooks:
        -> Ele vai permite acessar os estados e ciclo de vida do componente.

        * Regras do Hooks:
        -> Chame apenas os Hooks no n√≠vel mais alto do componente(Chama logo no escopo inicial). N√£o chame Hooks dentro de loops condi√ß√µes ou fun√ß√µes aninhadas.

        -> Apenas chama Hooks de componentes funcionais. N√£o chame Hooks de fun√ß√µes JavaScript comuns.

        * Como indentificar um Hooks:
        -> Sempre vai come√ßar com um use[...].

        * Hooks de Estado:
        -> Estado: O mesmo conceito que vimos nos componentes em classe.
            ? Ex: const [contador, fun√ß√£o] = useState('estado em que come√ßa o contador')

        * {} -> Eu saiu da aplica√ß√£o React e entro no JavaScript.
        * () -> Eu saiu do JavaScrit e entro na minha aplica√ß√£o React.
        * 
    
    ! React Funcional III - Hooks de efeito
        * useEffect:
            -> O useEffect √© um hook do React que permite executar efeitos colaterais em componentes funcionais, como:
                1. Buscar dados de uma API
                2. Manipular o DOM
                3. Usar timers (setTimeout, setInterval)
                4. Sincronizar estados com localStorage ou outras vari√°veis externas.

            Sintaxe b√°sica:

            import { useEffect } from 'react';
            useEffect(() => {
            // C√≥digo a ser executado
            }, [depend√™ncias]);

            * Como funciona:
                -> Por padr√£o, sempre o useEffect ser√° disparado ap√≥s a montagem do componente.
                -> O primeiro argumento √© uma fun√ß√£o que ser√° executada.
                -> O segundo argumento √© um array de depend√™ncias. Ele determina quando o efeito ser√° executado.

            Exemplos pr√°ticos:
            üü¢ 1. Executar apenas uma vez (quando o componente montar):
            useEffect(() => {
            console.log('Componente montado!');
            }, []); // array vazio => executa apenas na montagem

            üü° 2. Executar sempre que uma vari√°vel mudar:
            useEffect(() => {
            console.log(`O valor de count mudou: ${count}`);
            }, [count]); // executa sempre que "count" mudar

            üî¥ 3. Limpar efeitos (como event listeners ou intervals):
            useEffect(() => {
            const timer = setInterval(() => {
                console.log('Rodando...');
            }, 1000);

            return () => {
                clearInterval(timer); // limpa o intervalo quando o componente for desmontado
                console.log('Intervalo limpo!');
            };
            }, []);
            
            Resumo:
            Objetivo	C√≥digo
            Executar 1 vez (montagem)	useEffect(() => {}, [])
            Executar quando algo mudar	useEffect(() => {}, [x])
            Executar sempre que renderizar	useEffect(() => {})
            Limpar um efeito	return () => { ... } dentro


    ! React Funcional IV - Hook de refer√™ncia
        * useRef:
        -> O useRef √© um hook do React que te permite:
            1. Referenciar elementos do DOM (como acessar diretamente um input, por exemplo).
            2. Armazenar valores mut√°veis que n√£o causam re-renderiza√ß√£o quando s√£o atualizados.


        üì¶ Sintaxe b√°sica
        const minhaRef = useRef(valorInicial);

        ‚úÖ Casos de uso
        1. üìçRefer√™ncia ao DOM (como o document.querySelector do JS)
        Voc√™ pode usar o useRef para acessar elementos da tela sem causar re-render.

        Exemplo: Focar um input ao carregar a p√°gina
        import { useRef, useEffect } from 'react';

        function MeuComponente() {
        const inputRef = useRef(null);

        useEffect(() => {
            inputRef.current.focus(); // foca automaticamente o input
        }, []);

        return <input ref={inputRef} placeholder="Digite algo" />;
        }

        2. üß† Guardar valores entre renders sem perder o valor
        Ideal quando voc√™ n√£o quer re-renderizar ao mudar o valor (diferente de useState).

        Exemplo: Contador de renders
        import { useRef, useEffect, useState } from 'react';

        function RenderCounter() {
        const renderCount = useRef(0);
        const [state, setState] = useState(0);

        useEffect(() => {
            renderCount.current += 1;
        });

        return (
            <div>
            <p>Renderiza√ß√µes: {renderCount.current}</p>
            <button onClick={() => setState(state + 1)}>Re-renderizar</button>
            </div>
        );
        }
        renderCount.current √© atualizado sem causar novo render.

        üîÅ Compara√ß√£o r√°pida
        Hook	Re-renderiza?	Para que serve?
        useState	‚úÖ Sim	Guardar estado da UI
        useRef	‚ùå N√£o	Guardar valores entre renders ou acessar DOM

        üîß Dica final
        O valor de useRef fica dentro da propriedade .current. Exemplo:


        const contador = useRef(0);
        contador.current += 1;


    ! React Funcional IV - Hooks de memoiza√ß√£o
        * useMemo:
        ->  √© um hook do React usado para memorizar valores calculados ‚Äî ou seja, ele guarda o resultado de uma fun√ß√£o e s√≥ recalcula esse valor quando as depend√™ncias mudam. Isso evita recalcular coisas pesadas desnecessariamente, melhorando o desempenho da aplica√ß√£o.

        üìå Sintaxe
        const valorMemorizado = useMemo(() => {
        // fun√ß√£o que retorna um valor
        return resultado;
        }, [depend√™ncias]);

        üîß Quando usar?
            Use useMemo quando:
                1. Voc√™ tem c√°lculos pesados (ex: filtragens, ordena√ß√µes, loops grandes).
                2. O valor √© reutilizado no render.
                3. As depend√™ncias desse c√°lculo mudam com pouca frequ√™ncia.

        ‚úÖ Exemplo simples
            import React, { useMemo, useState } from 'react';

            function Exemplo() {
            const [numero, setNumero] = useState(0);
            const [contador, setContador] = useState(0);

            const numeroDobrado = useMemo(() => {
                console.log("Calculando...");
                return numero * 2;
            }, [numero]);

            return (
                <div>
                <p>N√∫mero: {numero}</p>
                <p>N√∫mero Dobrado: {numeroDobrado}</p>
                <button onClick={() => setNumero(numero + 1)}>Aumentar N√∫mero</button>
                <button onClick={() => setContador(contador + 1)}>Aumentar Contador</button>
                </div>
            );
            }

            Explica√ß√£o:
                1. O valor numeroDobrado s√≥ ser√° recalculado quando numero mudar.
                2. Se apenas contador mudar, o c√°lculo n√£o ser√° refeito.

            ‚ö†Ô∏è Cuidado:
                1. N√£o use useMemo para tudo. Ele s√≥ vale a pena se o 2. 2. c√°lculo for realmente custoso.
                Evite otimizar prematuramente. Use quando tiver problemas de performance reais ou re-renders desnecess√°rios.

        * useCallback
            -> O useCallback √© um hook do React usado para memorizar uma fun√ß√£o, ou seja, evitar que ela seja recriada em toda renderiza√ß√£o, a menos que suas depend√™ncias mudem.

            üìå Sintaxe
            const memoizedCallback = useCallback(() => {
            // fun√ß√£o
            }, [depend√™ncias]);

            ‚úÖ Quando usar useCallback
            Use quando:
                1. Voc√™ passa uma fun√ß√£o para um componente filho que √© otimizado com React.memo.
                3. Voc√™ quer evitar que a fun√ß√£o seja recriada em cada render.
                3. A fun√ß√£o depende de valores que podem mudar, e voc√™ quer controlar isso com um array de depend√™ncias.

            üß† Exemplo pr√°tico
            import React, { useState, useCallback } from 'react';

            const Button = React.memo(({ onClick, children }) => {
            console.log('Renderizou:', children);
            return <button onClick={onClick}>{children}</button>;
            });

            function App() {
            const [count, setCount] = useState(0);
            const [dark, setDark] = useState(false);

            // Esta fun√ß√£o s√≥ ser√° recriada se `count` mudar
            const increment = useCallback(() => {
                setCount((c) => c + 1);
            }, []);

            const themeStyles = {
                backgroundColor: dark ? '#333' : '#FFF',
                color: dark ? '#FFF' : '#000',
            };

            return (
                <div style={themeStyles}>
                <h1>{count}</h1>
                <Button onClick={increment}>Incrementar</Button>
                <button onClick={() => setDark((prev) => !prev)}>Toggle Tema</button>
                </div>
            );
            }

            üîç Sem useCallback, a fun√ß√£o increment seria recriada sempre que o componente App fosse re-renderizado, o que faria o bot√£o filho Button (mesmo com React.memo) renderizar novamente. Com useCallback, ela √© mantida na mem√≥ria e o Button s√≥ renderiza se realmente precisar.

            ‚ö†Ô∏è Quando n√£o usar useCallback
            1. Se a fun√ß√£o n√£o √© passada para componentes filhos, n√£o √© usada em useEffect ou n√£o tem impacto de performance, n√£o precisa usar.
            2. Usar useCallback √† toa pode at√© prejudicar a performance, porque manter refer√™ncias em mem√≥ria tamb√©m custa.









*/